#include <stdlib.h>

typedef struct heap_node {
    int data;
    struct heap_node *left;
    struct heap_node *right;
} heap_t;

void heapify_up(heap_t *node) {
    if (node == NULL || node->left == NULL) {
        return;
    }

    heap_t *largest_node = node;

    if (node->left != NULL && node->left->data > largest_node->data) {
        largest_node = node->left;
    }

    if (node->right != NULL && node->right->data > largest_node->data) {
        largest_node = node->right;
    }

    if (largest_node != node) {
        int temp = node->data;
        node->data = largest_node->data;
        largest_node->data = temp;
        heapify_up(largest_node);
    }
}

heap_t *heap_insert(heap_t **root, int value) {
    if (root == NULL) {
        return NULL;
    }

    heap_t *new_node = malloc(sizeof(heap_t));
    if (new_node == NULL) {
        return NULL;
    }

    new_node->data = value;
    new_node->left = NULL;
    new_node->right = NULL;

    if (*root == NULL) {
        *root = new_node;
        return new_node;
    }

    heap_t *current_node = *root;

    while (current_node->left != NULL) {
        if (current_node->left == NULL) {
            current_node->left = new_node;
            break;
        } else if (current_node->right == NULL) {
            current_node->right = new_node;
            break;
        } else {
            if (current_node->left->left == NULL || current_node->left->right == NULL) {
                current_node = current_node->left;
            } else {
                current_node = current_node->right;
            }
        }
    }

    heapify_up(new_node);

    return new_node;
}

